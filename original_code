#Import standard libraries
import os
import pandas as pd
import geopandas as gpd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import earthpy.spatial as es
import earthpy.plot as ep
import datetime
import rasterio
from rasterio.plot import show
from fiona.crs import from_epsg

#Import machine learning and statistical libraries
import sklearn.metrics as metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from statsmodels.tools.tools import add_constant
from statsmodels.stats.outliers_influence import variance_inflation_factor 

#Import additional data visualization libraries
import chart_studio.plotly as py
from IPython.display import Image
from six import StringIO
from sklearn.tree import export_graphviz
import pydot
import plotly.graph_objects as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import cufflinks as cf

#For Jupyter Notebook: connect notebook for plotly interactive library use
init_notebook_mode(connected=True) 

#For the ability to use cufflinks offline
cf.go_offline() 

#For Jupyter Notebook: visualize matplotlib plots
%matplotlib inline


#Set working directory
os.chdir('/Users/marie/Desktop/github/projekt/')


#NDVI creation and export
with rasterio.open('landsat_5/landsat_5_1km_clip.tif') as src:
    l5_data=src.read()
    l5_meta=src.profile
l5_data.shape
l5_ndvi=es.normalized_diff(l5_data[3], l5_data[2])

ep.plot_bands(l5_ndvi, 
              cmap='RdYlGn',
              scale=False,
              vmin=-1, vmax=1,
              title='LANDSAT 5 Derived NDVI\n July 2010 - Utah County, UT')
plt.show()

ep.hist(l5_ndvi,
        colors=['r'],
        figsize=(8, 6),
        bins=25,
        title=['NDVI: Distribution of pixels\n Landsat 5 2010 Utah County'],
        hist_range=(-1,1))
plt.show()

src.profile
type(l5_ndvi), l5_ndvi.dtype
l5_meta['count']=1
l5_meta['dtype']='float64'
l5_meta
l5_ndvi_outpath=os.path.join('study_areas/utah/predictor_tifs/l5ndvi_ut_county.tif')
with rasterio.open(l5_ndvi_outpath, 'w', **l5_meta) as dst:
    dst.write(l5_ndvi, 1)


#Load and analyze wildfire data
pd.set_option('display.max_columns', None)
wfdf=gpd.read_file('wildfire_gdb/wf_1981_2010_ut_bb.shp')
wfdf.head()
wfdf.info()
wfdf.drop(wfdf.columns[[1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24,
                        25, 29, 30, 31, 32, 33, 34, 35]], axis=1, inplace=True)
wfdf.head()
sns.heatmap(wfdf.isnull(), yticklabels=False, cbar=True, cmap='mako')
wfdf.dropna(inplace=True)
sns.heatmap(wfdf.isnull(), yticklabels=False, cbar=False, cmap='mako')


#Visualize original data and variable correlation
viz_df=pd.DataFrame(wfdf)
viz_df['SIZECLASSN'].plot.density(color='orangered')
sns.jointplot(x='YEAR_',y='SIZECLASSN',data=viz_df, kind='kde', color='orangered')
sns.violinplot(x='CAUSE', y='SIZECLASSN', data=viz_df, palette='YlOrRd')
viz_df.iplot(kind='bar', x='ORGANIZATI', y='TOTALACRES', colors='orange')
viz_df.iplot(kind='bubble', title='Wildfire Occurrences & Sizes, Utah County 1981-2010',
             xTitle='Longitude', yTitle='Latitude', colors='orange',x='DLONGITUDE',
             y='DLATITUDE', size='TOTALACRES')

wfdf.drop(['ORGANIZATI', 'YEAR_'], axis=1, inplace=True)
wfdf['Month']=pd.to_datetime(wfdf['STARTDATED'], format='%Y-%m-%d').dt.month
wfdf.drop(['STARTDATED'], axis=1, inplace=True)
wfdf.groupby('CAUSE').count()
sns.countplot(x='CAUSE', data=wfdf, palette='mako')
pd.get_dummies(wfdf['CAUSE'])
pd.get_dummies(wfdf['CAUSE'], drop_first=True)
wfdf['CAUSE']=pd.get_dummies(wfdf['CAUSE'], drop_first=True)
wfdf.reset_index(drop=True)
sns.heatmap(wfdf.corr(), cmap='mako', annot=False) 


#Raster import and visualization with geometry
elevation=rasterio.open('predictor_tifs/elev_ut_county.tif')
slope=rasterio.open('predictor_tifs/slope_ut_county.tif')
aspect=rasterio.open('predictor_tifs/aspect_ut_county.tif')
landcover=rasterio.open('predictor_tifs/lc_ut_county.tif')
domveg=rasterio.open('predictor_tifs/dv_ut_county.tif')
ppt=rasterio.open('predictor_tifs/ppt_ut_county.tif')
tmax=rasterio.open('predictor_tifs/tmax_ut_county.tif')
tmean=rasterio.open('predictor_tifs/tmean_ut_county.tif')
tmin=rasterio.open('predictor_tifs/tmin_ut_county.tif')
vpdmax=rasterio.open('predictor_tifs/vpdmax_ut_county.tif')
vpdmin=rasterio.open('predictor_tifs/vpdmin_ut_county.tif')
trails=rasterio.open('predictor_tifs/trails_buffer_bb_ut_county.tif')
ndvi=rasterio.open('predictor_tifs/l5ndvi_ut_county.tif')
print(wfdf.crs)
print(trails.crs)

fig, ((ax1,ax2), (ax3,ax4), (ax5,ax6))=plt.subplots(nrows=3, ncols=2, figsize=(16,16))
wfdf.plot(ax=ax1, marker='.', color='orangered', alpha=0.5)
wfdf.plot(ax=ax2, marker='.', color='orangered', alpha=0.5)
wfdf.plot(ax=ax3, marker='.', color='black', alpha=0.5)
wfdf.plot(ax=ax4, marker='.', color='black', alpha=0.5)
wfdf.plot(ax=ax5, marker='.', color='black', alpha=0.5)
wfdf.plot(ax=ax6, marker='.', color='red', alpha=0.5)
show(elevation, ax=ax1, cmap='terrain', title='Elevation')
show(slope, ax=ax2, cmap='gist_gray', title='Slope')
show(aspect, ax=ax3, cmap='Pastel1', title='Aspect')
show(landcover, ax=ax4, cmap='Pastel2', title='Land Cover')
show(domveg, ax=ax5, cmap='Set3', title='Dominant Vegetation')
show(trails, ax=ax6, cmap='binary', title='Trails and Pathways')
plt.tight_layout()

fig, ((ax1,ax2), (ax3,ax4), (ax5,ax6))=plt.subplots(nrows=3, ncols=2, figsize=(16,16))
wfdf.plot(ax=ax1, marker='.', color='orangered', alpha=0.5)
wfdf.plot(ax=ax2, marker='.', color='black', alpha=0.5)
wfdf.plot(ax=ax3, marker='.', color='black', alpha=0.5)
wfdf.plot(ax=ax4, marker='.', color='black', alpha=0.5)
wfdf.plot(ax=ax5, marker='.', color='black', alpha=0.5)
wfdf.plot(ax=ax6, marker='.', color='black', alpha=0.5)
show(ppt, ax=ax1, cmap='Blues', title='Precipitation: 30 Year Normal')
show(tmax, ax=ax2, cmap='hot', title='Maximum Temperature: 30 Year Normal')
show(tmean, ax=ax3, cmap='hot', title='Mean Temperature: 30 Year Normal')
show(tmin, ax=ax4, cmap='hot', title='Minimum Temperature: 30 Year Normal')
show(vpdmax, ax=ax5, cmap='coolwarm', title='Maximum VPD: 30 Year Normal')
show(vpdmin, ax=ax6, cmap='coolwarm', title='Minimum VPD: 30 Year Normal')
plt.tight_layout()

coords=[(x,y) for x, y in zip(wfdf.DLONGITUDE, wfdf.DLATITUDE)] 
wfdf['Elevation']=[x[0] for x in elevation.sample(coords)]
wfdf['Slope']=[x[0] for x in slope.sample(coords)]
wfdf['Aspect']=[x[0] for x in aspect.sample(coords)]
wfdf['Landcover']=[x[0] for x in landcover.sample(coords)]
wfdf['Dominant Vegetation']=[x[0] for x in domveg.sample(coords)]
wfdf['Precipitation']=[x[0] for x in ppt.sample(coords)]
wfdf['Max Temp']=[x[0] for x in tmax.sample(coords)]
wfdf['Mean Temp']=[x[0] for x in tmean.sample(coords)]
wfdf['Min Temp']=[x[0] for x in tmin.sample(coords)]
wfdf['Max Air Pressure']=[x[0] for x in vpdmax.sample(coords)]
wfdf['Min Air Pressure']=[x[0] for x in vpdmin.sample(coords)]
wfdf['Trails']=[x[0] for x in trails.sample(coords)]
wfdf['NDVI']=[x[0] for x in ndvi.sample(coords)]
wfdf.head()


#Raster correlation
wfdf.drop(['geometry'], axis=1, inplace=True)
fig, ax = plt.subplots(figsize=(16,16))
sns.heatmap(wfdf.corr(), cmap='mako', annot=True) 

vif = pd.DataFrame()
vif['VIF'] = [variance_inflation_factor(wfdf.values, i) for i in range(wfdf.shape[1])]
vif['variable'] = wfdf.columns
vif

wfdf.drop(['Min Air Pressure', 'Mean Temp', 'Min Temp'], axis=1, inplace=True)
fig, ax = plt.subplots(figsize=(16,16))
sns.heatmap(wfdf.corr(), cmap='mako', annot=True) 


#Cause prediction
wfdf_cause=wfdf
wfdf_cause.reset_index(drop=True)
cols_at_end=['CAUSE']
wfdf_cause=wfdf_cause[[c for c in wfdf_cause if c not in cols_at_end] 
        +[c for c in cols_at_end if c in wfdf_cause]]
scaler=StandardScaler()       
scaler.fit(wfdf_cause.drop('CAUSE', axis=1))        
scaled_features=scaler.transform(wfdf_cause.drop('CAUSE', axis=1))     
wfdf_train=pd.DataFrame(scaled_features, columns=wfdf_cause.columns[:-1])        
wfdf_train.head()        
X=wfdf_train
y=wfdf_cause['CAUSE']         
X_train, X_test, y_train, y_test=train_test_split(scaled_features,wfdf_cause['CAUSE'], test_size=0.30)        
knn=KNeighborsClassifier(n_neighbors=1)        
knn.fit(X_train, y_train)        
knn_pred=knn.predict(X_test)        

print(confusion_matrix(y_test, knn_pred))
print('\n')
print(classification_report(y_test, knn_pred))

error=[]
for i in range(1, 50):
    knn=KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i=knn.predict(X_test)
    error.append(np.mean(pred_i !=y_test)) 

plt.figure(figsize=(10,6))
plt.plot(range(1,50), error, color='blue', ls=':', marker='o', markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

knn=KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train, y_train)
pred=knn.predict(X_test)

print(confusion_matrix(y_test, pred))
print('\n')
print(classification_report(y_test, pred))

dt=DecisionTreeClassifier()
dt.fit(X_train, y_train)
dt_pred=dt.predict(X_test)

print(confusion_matrix(y_test, dt_pred))
print('\n')
print(classification_report(y_test, dt_pred))

features=list(wfdf_cause.columns[:-1])  

dot_data=StringIO()
export_graphviz(dt, out_file=dot_data, feature_names=features, filled=True, rounded=True)

graph=pydot.graph_from_dot_data(dot_data.getvalue())  
Image(graph[0].create_png()) 

rf=RandomForestClassifier(n_estimators=100, criterion='gini') 
rf.fit(X_train, y_train)
rf_pred=rf.predict(X_test)

print(confusion_matrix(y_test, rf_pred))
print('\n')
print(classification_report(y_test, rf_pred))

svm=SVC(probability=True)
svm.fit(X_train, y_train)
svm_pred=svm.predict(X_test)

print(confusion_matrix(y_test, svm_pred))
print('\n')
print(classification_report(y_test, svm_pred))

param_grid={'C':[0.1, 1, 10, 100, 1000], 'gamma':[1, 0.1, 0.01, 0.001, 0.0001], 'kernel':['rbf']} 
grid=GridSearchCV(SVC(probability=True), param_grid, refit=True, verbose=3)
grid.fit(X_train, y_train)
grid.best_params_
grid.best_estimator_
svm_pred2=grid.predict(X_test)

print(confusion_matrix(y_test, svm_pred2))
print('\n')
print(classification_report(y_test, svm_pred2))

fig, ax=plt.subplots(figsize=(10,10))
y_pred_prob_knn=knn.predict_proba(X_test)[:,1]
fpr1, tpr1, threshold1=metrics.roc_curve(y_test, y_pred_prob_knn)
roc_auc1=metrics.auc(fpr1, tpr1)
y_pred_prob_dt=dt.predict_proba(X_test)[:,1]
fpr2, tpr2, threshold2=metrics.roc_curve(y_test, y_pred_prob_dt)
roc_auc2=metrics.auc(fpr2, tpr2)
y_pred_prob_rf=rf.predict_proba(X_test)[:,1]
fpr3, tpr3, threshold3=metrics.roc_curve(y_test, y_pred_prob_rf)
roc_auc3=metrics.auc(fpr3, tpr3)
y_pred_prob_svm=grid.predict_proba(X_test)[:,1]
fpr4, tpr4, threshold4=metrics.roc_curve(y_test, y_pred_prob_svm)
roc_auc4=metrics.auc(fpr4, tpr4)
plt.plot(fpr1, tpr1, 'b', label='KNN AUC = %0.2f' %roc_auc1, color='blue')
plt.plot(fpr2, tpr2, 'b', label='DT AUC = %0.2f' %roc_auc2, color='orange')
plt.plot(fpr3, tpr3, 'b', label='RF AUC = %0.2f' %roc_auc3, color='green')
plt.plot(fpr4, tpr4, 'b', label='SVM AUC = %0.2f' %roc_auc4, color='purple')
plt.title('AUC-ROC: Cause Prediction of Wildfires')
plt.legend(loc='lower right')
plt.plot([0, 1], [0, 1],'r:')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('TPR')
plt.xlabel('FPR')
plt.show()


#Size prediction
wfdf_size=wfdf
wfdf_size.reset_index(drop=True)
cols_at_end=['SIZECLASSN']
wfdf_size=wfdf_size[[c for c in wfdf_size if c not in cols_at_end] 
        +[c for c in cols_at_end if c in wfdf_size]]
scaler.fit(wfdf_size.drop('SIZECLASSN', axis=1))
scaled_features=scaler.transform(wfdf_size.drop('SIZECLASSN', axis=1))
wfdf_train=pd.DataFrame(scaled_features, columns=wfdf_size.columns[:-1])
X=wfdf_train
y=wfdf_size['SIZECLASSN']
X_train, X_test, y_train, y_test=train_test_split(scaled_features, wfdf_size['SIZECLASSN'], test_size=0.30)
knn.fit(X_train,y_train)
knn_pred=knn.predict(X_test)

error=[]
for i in range(1, 50):
    knn=KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i=knn.predict(X_test)
    error.append(np.mean(pred_i !=y_test)) 
    
plt.figure(figsize=(10,6))
plt.plot(range(1,50), error, color='blue', ls=':', marker='o', markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

knn=KNeighborsClassifier(n_neighbors=11)
knn.fit(X_train, y_train)
pred=knn.predict(X_test)

print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

dt.fit(X_train, y_train)
dt_pred=dt.predict(X_test)

print(confusion_matrix(y_test, dt_pred))
print('\n')
print(classification_report(y_test, dt_pred))

rf=RandomForestClassifier(n_estimators=100, criterion='gini') 
rf.fit(X_train, y_train)
rf_pred=rf.predict(X_test)

print(confusion_matrix(y_test, rf_pred))
print('\n')
print(classification_report(y_test, rf_pred))

svm.fit(X_train, y_train)
svm_pred=svm.predict(X_test)

print(confusion_matrix(y_test, svm_pred))
print('\n')
print(classification_report(y_test, svm_pred))

param_grid={'C':[0.1, 1, 10, 100, 1000], 'gamma':[1, 0.1, 0.01, 0.001, 0.0001], 'kernel':['rbf']} 
grid=GridSearchCV(SVC(probability=True), param_grid, refit=True, verbose=3)
grid.fit(X_train, y_train)
grid.best_params_
grid.best_estimator_
svm_pred2=grid.predict(X_test)

print(confusion_matrix(y_test, svm_pred2))
print('\n')
print(classification_report(y_test, svm_pred2))


#Presence/absence prediction
wfdf_pa=wfdf[['DLATITUDE', 'DLONGITUDE']]
wfdf_pa['Wildfire']=1
wfdf_pa2=gpd.read_file('wildfire_gdb/wf_all_1981_2010_ut_bb_1600.shp')
wfdf_pa2.drop(['CID','geometry'], axis=1, inplace=True)
wfdf_pa2['Wildfire']=0
frames=[wfdf_pa, wfdf_pa2]
pa=pd.concat(frames)
pa.reset_index(drop=True)
coords=[(x,y) for x, y in zip(pa.DLONGITUDE, pa.DLATITUDE)] 
pa['Elevation']=[x[0] for x in elevation.sample(coords)]
pa['Slope']=[x[0] for x in slope.sample(coords)]
pa['Landcover']=[x[0] for x in landcover.sample(coords)]
pa['Dominant Vegetation']=[x[0] for x in domveg.sample(coords)]
pa['Precipitation']=[x[0] for x in ppt.sample(coords)]
pa['Max Temp']=[x[0] for x in tmax.sample(coords)]
pa['Max Air Pressure']=[x[0] for x in vpdmin.sample(coords)]
pa['Trails']=[x[0] for x in trails.sample(coords)]
pa['NDVI']=[x[0] for x in ndvi.sample(coords)]

cols_at_end = ['Wildfire']
pa = pa[[c for c in pa if c not in cols_at_end] 
        +[c for c in cols_at_end if c in pa]]

X=pa.drop('Wildfire', axis=1)
y=pa['Wildfire']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)
knn.fit(X_train, y_train)
knn_pred=knn.predict(X_test)

error=[]
for i in range(1, 50):
    knn=KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i=knn.predict(X_test)
    error.append(np.mean(pred_i !=y_test)) 

plt.figure(figsize=(10,6))
plt.plot(range(1,50), error, color='blue', ls=':', marker='o', markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

knn=KNeighborsClassifier(n_neighbors=48)
knn.fit(X_train, y_train)
knn_pred=knn.predict(X_test)

print(confusion_matrix(y_test,knn_pred))
print('\n')
print(classification_report(y_test,knn_pred))

dt.fit(X_train, y_train)
dt_pred=dt.predict(X_test)

print(confusion_matrix(y_test, dt_pred))
print('\n')
print(classification_report(y_test, dt_pred))

features=list(pa.columns[:-1])
dot_data=StringIO()
export_graphviz(dt, out_file=dot_data, feature_names=features, filled=True, rounded=True)

graph=pydot.graph_from_dot_data(dot_data.getvalue())  
Image(graph[0].create_png()) 

rf=RandomForestClassifier(n_estimators=200, criterion='gini') 
rf.fit(X_train, y_train)
rf_pred=rf.predict(X_test)

print(confusion_matrix(y_test, rf_pred))
print('\n')
print(classification_report(y_test, rf_pred))

svm.fit(X_train, y_train)
svm_pred=svm.predict(X_test)

print(confusion_matrix(y_test, svm_pred))
print('\n')
print(classification_report(y_test, svm_pred))

param_grid={'C':[0.1, 1, 10, 100, 1000], 'gamma':[1, 0.1, 0.01, 0.001, 0.0001], 'kernel':['rbf']} 
grid=GridSearchCV(SVC(probability=True), param_grid, refit=True, verbose=3)
grid.fit(X_train, y_train)
grid.best_params_
grid.best_estimator_
grid_pred=grid.predict(X_test)

print(confusion_matrix(y_test, grid_pred))
print('\n')
print(classification_report(y_test, grid_pred))

fig, ax=plt.subplots(figsize=(10,10))
y_pred_prob_knn=knn.predict_proba(X_test)[:,1]
fpr1, tpr1, threshold1=metrics.roc_curve(y_test, y_pred_prob_knn)
roc_auc1=metrics.auc(fpr1, tpr1)
y_pred_prob_dt=dt.predict_proba(X_test)[:,1]
fpr2, tpr2, threshold2=metrics.roc_curve(y_test, y_pred_prob_dt)
roc_auc2=metrics.auc(fpr2, tpr2)
y_pred_prob_rf=rf.predict_proba(X_test)[:,1]
fpr3, tpr3, threshold3=metrics.roc_curve(y_test, y_pred_prob_rf)
roc_auc3=metrics.auc(fpr3, tpr3)
y_pred_prob_svm=grid.predict_proba(X_test)[:,1]
fpr4, tpr4, threshold4=metrics.roc_curve(y_test, y_pred_prob_svm)
roc_auc4=metrics.auc(fpr4, tpr4)
plt.plot(fpr1, tpr1, 'b', label='KNN AUC = %0.2f' %roc_auc1, color='blue')
plt.plot(fpr2, tpr2, 'b', label='DT AUC = %0.2f' %roc_auc2, color='orange')
plt.plot(fpr3, tpr3, 'b', label='RF AUC = %0.2f' %roc_auc3, color='green')
plt.plot(fpr4, tpr4, 'b', label='SVM AUC = %0.2f' %roc_auc4, color='purple')

plt.title('AUC-ROC: Presence Prediction of Wildfires')
plt.legend(loc='lower right')
plt.plot([0, 1], [0, 1],'r:')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('TPR')
plt.xlabel('FPR')
plt.show()
